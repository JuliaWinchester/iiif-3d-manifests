"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const { existsSync } = require('fs');
const { glob } = require('glob');
const { join } = require('path');
const labelBoilerplate = require('./boilerplate/label');
const thumbnailBoilerplate = require('./boilerplate/thumbnail');
const urljoin = require('url-join');
class Utils {
    static timeout(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    static cloneJson(json) {
        return JSON.parse(JSON.stringify(json));
    }
    static formatMetadata(metadata) {
        const formattedMetadata = [];
        for (let key in metadata) {
            if (metadata.hasOwnProperty(key)) {
                const value = metadata[key];
                const item = {};
                item.label = Utils.getLabel(key);
                item.value = Utils.getLabel(value);
                formattedMetadata.push(item);
            }
        }
        return formattedMetadata;
    }
    static hasManifestsYML(filePath) {
        const manifestsPath = join(filePath, 'manifests.yml');
        return existsSync(manifestsPath);
    }
    static getThumbnail(json, url, filePath) {
        const thumbnailPattern = filePath + '/thumb.*';
        const thumbnails = glob.sync(thumbnailPattern);
        if (thumbnails.length) {
            let thumbnail = thumbnails[0];
            const thumbnailJson = Utils.cloneJson(thumbnailBoilerplate);
            thumbnailJson[0].id = Utils.mergePaths(url, thumbnail);
            json.thumbnail = thumbnailJson;
        }
    }
    static getLabel(value) {
        const labelJson = Utils.cloneJson(labelBoilerplate);
        labelJson['@none'].push(value);
        return labelJson;
    }
    /*
        merge these two example paths:
        url:        http://test.com/collection/manifest
        filePath:   c:/user/documents/collection/manifest/_canvas/thumb.png

        into:       http://test.com/collection/manifest/_canvas/thumb.png
    */
    static mergePaths(url, filePath) {
        // split the url (minus origin) and filePath into arrays
        //                            ['collection', 'manifest']
        // ['c:', 'user', 'documents', 'collection', 'manifest', '_canvas', 'thumb.jpg']
        // walk backwards through the filePath array adding to the newPath array until the last item of the url array is found.
        // then while the next url item matches the next filePath item, add it to newPath.
        // the final path is the url origin plus a reversed newPath joined with a '/'
        let origin = url.origin;
        let urlParts;
        if (url.protocol === 'dat:') {
            origin = 'dat://';
            urlParts = url.href.replace(origin, '').split('/');
        }
        else {
            urlParts = url.href.replace(origin + '/', '').split('/');
        }
        filePath = filePath.replace(/\\/g, '/');
        const fileParts = filePath.split('/');
        const newPath = [];
        for (let f = fileParts.length - 1; f >= 0; f--) {
            const filePart = fileParts[f];
            newPath.push(filePart);
            if (filePart === urlParts[urlParts.length - 1]) {
                if (urlParts.length > 1) {
                    for (let u = urlParts.length - 2; u >= 0; u--) {
                        f--;
                        if (fileParts[f] === urlParts[u]) {
                            newPath.push(fileParts[f]);
                        }
                        else {
                            newPath.push(urlParts[u]);
                        }
                    }
                }
                break;
            }
        }
        let id = urljoin(origin, ...newPath.reverse());
        return id;
    }
}
exports.Utils = Utils;
